import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'de.undercouch.download'

def userGradleScript = file("$rootProject.projectDir/private.gradle")
if (userGradleScript.exists()) {
    apply from: userGradleScript
}

def aria2Version = '1.18.9'
def ownVersion = '0.9.0.3'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "net.sf.aria2"
        minSdkVersion 9
        targetSdkVersion 21
        versionCode 9 // bump by 3 per release
        versionName "$ownVersion+upstream.$aria2Version"
    }
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi', 'armeabi-v7a'
            universalApk true
        }
    }
    signingConfigs {
        release {
            def keystorePathEnv = System.getenv('KEYSTORE')
            def keyAliasEnv = System.getenv('KEY_ALIAS')

            storeFile file(keystorePathEnv?.trim() ? keystorePathEnv : "$rootProject.projectDir/release.keystore")
            keyAlias 'alias'

            storePassword '***'
            keyPassword '***'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}



apply plugin: 'me.tatarka.retrolambda'

dependencies {
    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:1.8.0'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'org.jraf:android-switch-backport:1.4.0'
    compile 'com.android.support:support-v4:21.0.3'
}

def aria2NdkTaskPattern = Pattern.compile("ndkBuildAria2Abi_(.+)");

tasks.addRule("NDK tasks") { String taskName ->
    def m = aria2NdkTaskPattern.matcher(taskName);

    if (m.matches()) {
        def abi = m.group(1)

        def toolchainDir = "$projectDir.absolutePath/build/toolchain"
        def libsDir = "$projectDir.absolutePath/src/main/jniLibs"

        def gccVer = "4.9"

        def toolchain
        def hostName
        def arch

        switch (abi) {
            case 'x86':
                hostName = 'i686-linux-android'
                toolchain = "x86-${gccVer}"
                arch = 'arch-x86'
                break
            case 'armeabi_v7a':
                abi = 'armeabi-v7a'
                hostName = 'arm-linux-androideabi'
                toolchain = "arm-linux-androideabi-${gccVer}"
                arch = 'arch-arm'
                break
            default:
                throw new UnsupportedOperationException(abi + " not supported!")
        }

        def prepTask = taskName.replace("BuildAria2", "Prepare")
        prepTask = task(type: Exec, prepTask) {
            commandLine "$System.env.ANDROID_NDK/build/tools/make-standalone-toolchain.sh", "--platform=android-15",
                    "--toolchain=$toolchain", "--install-dir=$toolchainDir/$abi", "â€“-stl=libc++"

            inputs.file "$System.env.ANDROID_NDK/build/tools/make-standalone-toolchain.sh"
            outputs.dir "$toolchainDir/$abi"
        }

        def picTask = task(type: Exec, taskName + "PIC") {
            environment LDFLAGS: "-pie"

            commandLine "$projectDir.absolutePath/jni/build-natives.sh", "$hostName", "$abi", "$toolchain", "$arch"

            inputs.file "$projectDir.absolutePath/jni/build-natives.sh"
            outputs.dir "$libsDir/$abi"

            dependsOn prepTask
        }

        task(type: Exec, taskName) {
            commandLine "$projectDir.absolutePath/jni/build-natives.sh", "$hostName", "$abi", "$toolchain", "$arch"

            inputs.file "$projectDir.absolutePath/jni/build-natives.sh"
            outputs.dir "$libsDir/$abi"

            dependsOn picTask
        }
    }
}

import de.undercouch.gradle.tasks.download.Download

task downloadArmv5binary(type: Download) {
    src "http://sourceforge.net/projects/aria2/files/stable/aria2-$aria2Version/aria2-$aria2Version-android-build1.zip"
    dest new File(buildDir, 'armv5aria.zip')
    onlyIfNewer true
}

task downloadAndUnzipArmv5Binary(dependsOn: downloadArmv5binary, type: Copy) {
    from {
        zipTree(downloadArmv5binary.dest).matching {
            include '**/aria2c'
        }[0]
    }

    rename 'aria2c', 'aria2'
    into "$projectDir.absolutePath/src/main/jniLibs/armeabi"
}

task renameExecutables(type: Copy) {
    from "$projectDir.absolutePath/src/main/jniLibs"
    into "$projectDir.absolutePath/src/main/jniLibs"
    include '**/*'
    exclude '**/*.so'
    exclude '**/*.jar'
    rename(/(.+)/, 'lib$1_exec.so')
}

tasks.renameExecutables.dependsOn ndkBuildAria2Abi_x86, ndkBuildAria2Abi_armeabi_v7a, downloadAndUnzipArmv5Binary

//tasks.clean.dependsOn cleanRenameExecutables

tasks.withType(JavaCompile.class).each { JavaCompile compileTask ->
    compileTask.dependsOn renameExecutables
}

import javax.swing.JFileChooser
import javax.swing.JOptionPane
import java.awt.HeadlessException

task askForPasswords << {

    try {
        if (!android.signingConfigs.release.storeFile.exists()) {
            def fc = new JFileChooser(dialogTitle: 'Keystore file: ', fileSelectionMode: JFileChooser.FILES_ONLY);
            fc.showOpenDialog();
            def keystoreFile = fc.getSelectedFile();

            android.signingConfigs.release.storeFile = keystoreFile
        }

        def readln = JOptionPane.&showInputDialog

        if ('defaultKeyAlias' == android.signingConfigs.release.storePassword)
            android.signingConfigs.release.keyAlias = readln 'Key alias: '

        android.signingConfigs.release.storePassword = readln 'Keystore password: '
        android.signingConfigs.release.keyPassword = readln 'Key password: '
    } catch (HeadlessException graphicalDialogFailed) {
        try {
            android.signingConfigs.release.keystoreFile = priv.storeFile
            android.signingConfigs.release.storePassword = priv.storePass
            android.signingConfigs.release.keyPassword = priv.storeKeyPass
        } catch (Exception ignored) {}

        if (!android.signingConfigs.release.storePassword || !android.signingConfigs.release.keyPassword)
            throw new RuntimeException("failed to read signing config from local.properties", graphicalDialogFailed)
    }
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.matches("package(:?.+)Release")) {
        theTask.dependsOn "askForPasswords"
    }
}

ext.versionCodes = ['armeabi': 0, 'armeabi-v7a': 1, 'x86': 2]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    // assign different version code for each output
    variant.outputs.each { output ->
        def verAdd = project.versionCodes.get(output.getFilter(OutputFile.ABI))

        if (verAdd)
            output.versionCodeOverride = android.defaultConfig.versionCode + verAdd
    }
}
