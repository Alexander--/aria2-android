import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "net.sf.aria2"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

apply plugin: 'me.tatarka.retrolambda'

dependencies {
    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:1.8.0'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'org.jraf:android-switch-backport:1.4.0'
}

def aria2NdkTaskPattern = Pattern.compile("ndkBuildAria2Abi_(.+)");

tasks.addRule("NDK tasks") { String taskName ->
    def m = aria2NdkTaskPattern.matcher(taskName);

    if (m.matches()) {
        def abi = m.group(1)

        def toolchainDir = "$projectDir.absolutePath/build/toolchain"
        def libsDir = "$projectDir.absolutePath/src/main/jniLibs"

        def gccVer = "4.9"

        def toolchain
        def hostName
        def arch

        switch (abi) {
            case "x86":
                hostName = "i686-linux-android"
                toolchain = "x86-${gccVer}"
                arch = "arch-x86"
                break
            case "armeabi":
                hostName = "arm-linux-androideabi"
                toolchain = "arm-linux-androideabi-${gccVer}"
                arch = "arch-arm"
                break
            default:
                throw new UnsupportedOperationException()
        }

        def prepTask = taskName.replace("BuildAria2", "Prepare")
        prepTask = task(type: Exec, prepTask) {
            commandLine "$System.env.ANDROID_NDK/build/tools/make-standalone-toolchain.sh", "--platform=android-15",
                    "--toolchain=$toolchain", "--install-dir=$toolchainDir/$abi", "â€“-stl=libc++"

            inputs.file "$System.env.ANDROID_NDK/build/tools/make-standalone-toolchain.sh"
            outputs.dir "$toolchainDir/$abi"
        }

        def picTask = task(type: Exec, taskName + "PIC") {
            environment LDFLAGS: "-pie"

            commandLine "$projectDir.absolutePath/jni/build-natives.sh", "$hostName", "$abi", "$toolchain", "$arch"

            inputs.file "$projectDir.absolutePath/jni/build-natives.sh"
            outputs.dir "$libsDir/$abi"

            dependsOn prepTask
        }

        task(type: Exec, taskName) {
            commandLine "$projectDir.absolutePath/jni/build-natives.sh", "$hostName", "$abi", "$toolchain", "$arch"

            inputs.file "$projectDir.absolutePath/jni/build-natives.sh"
            outputs.dir "$libsDir/$abi"

            dependsOn picTask
        }
    }
}

task renameExecutables(type: Copy) {
    from "$projectDir.absolutePath/src/main/jniLibs"
    into "$projectDir.absolutePath/src/main/jniLibs"
    include '**/*'
    exclude '**/*.so'
    exclude '**/*.jar'
    rename(/(.+)/, 'lib$1_exec.so')
}

tasks.renameExecutables.dependsOn ndkBuildAria2Abi_x86, ndkBuildAria2Abi_armeabi

tasks.clean.dependsOn cleanRenameExecutables

tasks.withType(JavaCompile.class).each { JavaCompile compileTask ->
    compileTask.dependsOn renameExecutables
}
